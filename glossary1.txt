problem solving:
The process of formulating a problem, finding a solution, and expressing it.
high-level language:
A programming language like Python that is designed to be easy for humans to
read and write.
low-level language:
A programming language that is designed to be easy for a computer to run; also
called “machine language” or “assembly language”.
portability:
A property of a program that can run on more than one kind of computer.
interpreter:
A program that reads another program and executes it.
prompt:
Characters displayed by the interpreter to indicate that it is ready to take input
from the user.
program:
A set of instructions that specifies a computation.
print statement:
An instruction that causes the Python interpreter to display a value on the screen.
operator:
A special symbol that represents a simple computation like addition, multiplica-
tion, or string concatenation.
value:
One of the basic units of data, like a number or string, that a program
manipulates.
type:
A category of values, such as int, float and str.
integer:
A type that represents whole numbers.
floating-point:
A type that represents numbers with fractional parts.
string:
A type that represents sequences of characters.
natural language:
Any one of the languages that people speak that evolved naturally.
formal language:
Any one of the languages that people have designed for specific purposes, such as
representing mathematical ideas or computer programs.
token:
One of the basic elements of the syntactic structure of a program, analogous to a
word in a natural language.
syntax:
The rules that govern the structure of a program.
parse:
To examine a program and analyze the syntactic structure.
bug:
An error in a program.
debugging:
The process of finding and correcting bugs